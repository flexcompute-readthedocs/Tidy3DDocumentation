name: "tidy3d-frontend-tests"

on:
  workflow_dispatch:
  push:
    branches: [ develop, latest ]
  pull_request:
    branches:
      - latest
      - develop
      - 'pre/*'

jobs:

  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          submodules: 'recursive'
      - name: Test pre-commit hooks
        run: |
          python -m pip install --upgrade pip
          pip install pre-commit
          pre-commit run # this should be really more agressive

  test-latest-submodules:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository with submodules
        uses: actions/checkout@v4
        with:
          submodules: 'recursive'
          fetch-depth: 0

      - name: Determine current branch or PR ref
        id: get_branch
        run: |
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            BRANCH_NAME="${{ github.event.pull_request.base.ref }}"
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          else
            BRANCH_NAME=$(echo $GITHUB_REF | sed 's|refs/heads/||')
            echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          fi
          echo "BRANCH_NAME: $BRANCH_NAME"
        shell: bash
        env:
          GITHUB_REF: ${{ github.ref }}

      - name: Initialize and update submodule
        run: |
          git submodule update --init --recursive

      - name: Check if submodules are up to date and update if needed
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          NOTEBOOKS_PATH=docs/notebooks
          FAQ_PATH=docs/faq
          SUBMODULES_UPDATED=0
          
          # Function to update submodule
          update_submodule() {
            local path=$1
            local branch=$2
          
            echo "Checking $path for updates..."
            cd $path
            git fetch --all --verbose
            if git show-ref --verify refs/remotes/origin/$branch; then
              echo "Branch $branch exists."
            else
              echo "::error::Branch $branch does not exist on remote."
              exit 1
            fi
            LATEST_COMMIT=$(git rev-parse refs/remotes/origin/$branch)
            CURRENT_COMMIT=$(git rev-parse HEAD)
            echo "LATEST_COMMIT: $LATEST_COMMIT"
            echo "CURRENT_COMMIT: $CURRENT_COMMIT"
            cd ../..
          
            if [ "$LATEST_COMMIT" != "$CURRENT_COMMIT" ]; then
              echo "Submodule $path is not up to date. Updating..."
              cd $path
              git checkout $branch
              git pull origin $branch
              cd ../..
              git add $path
              SUBMODULES_UPDATED=1
            else
              echo "Submodule $path is up to date with the $branch branch."
            fi
          }
          
          # Check and update Notebooks submodule
          update_submodule $NOTEBOOKS_PATH $BRANCH_NAME
          
          # Check and update FAQ submodule only on the develop branch
          if [ "$BRANCH_NAME" == "develop" ]; then
            update_submodule $FAQ_PATH develop
          fi
          
          if [ "$SUBMODULES_UPDATED" -eq 1 ]; then
            echo "Submodules were updated. Committing changes..."
            git config --global user.name "github-actions[bot]"
            git config --global user.email "github-actions[bot]@users.noreply.github.com"
            git commit -m ":robot: :arrow_up: Update submodules to latest commits"
            git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} HEAD:${{ github.event.pull_request.head.ref }}
          else
            echo "No submodule updates were necessary."
          fi

  build:
    name: test ${{ matrix.python-version }} - ${{ matrix.platform }}
    runs-on: ${{ matrix.platform }}
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11', '3.12']
        platform: [ubuntu-latest, windows-latest, macos-latest]
    defaults:
      run:
        shell: bash
    env:  # Set environment variables for the whole job
      PIP_ONLY_BINARY: gdstk
      MPLBACKEND: agg
    steps:
    - uses: actions/checkout@v4

    #----------------------------------------------
    #  -----  install & configure poetry  -----
    #----------------------------------------------
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: 1.8.2
        virtualenvs-create: true
        virtualenvs-in-project: true

    #----------------------------------------------
    # install your root project, if required
    #----------------------------------------------
    - name: Install library
      run: |
        poetry --version
        poetry run pip install --upgrade pip wheel setuptools
        poetry run pip install gdstk --only-binary gdstk
        poetry install -E dev

    #----------------------------------------------
    #    add matrix specifics and run test suite
    #----------------------------------------------
    - name: Run tests
      run: |
        poetry run ruff format . --check --diff
        poetry run ruff check tidy3d --fix --exit-non-zero-on-fix
        poetry run pytest -rA tests
        poetry run pytest -rA tests/_test_data/_test_datasets_no_vtk.py
